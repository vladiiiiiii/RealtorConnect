// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealtorConnect.Data;

#nullable disable

namespace RealtorConnect.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250401190804_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RealtorConnect.Models.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApartmentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("HouseView")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RealtorGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("RealtorId")
                        .HasColumnType("int");

                    b.Property<int>("Rooms")
                        .HasColumnType("int");

                    b.Property<decimal>("SquareArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentStatusId");

                    b.HasIndex("ClientId");

                    b.HasIndex("RealtorGroupId");

                    b.HasIndex("RealtorId");

                    b.HasIndex("StatusId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("RealtorConnect.Models.ApartmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApartmentStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Доступна"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Недоступна"
                        });
                });

            modelBuilder.Entity("RealtorConnect.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceiverClientId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiverRealtorId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderClientId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderRealtorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverClientId");

                    b.HasIndex("ReceiverRealtorId");

                    b.HasIndex("SenderClientId");

                    b.HasIndex("SenderRealtorId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("RealtorConnect.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("GroupClientId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupClientId")
                        .IsUnique()
                        .HasFilter("[GroupClientId] IS NOT NULL");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("RealtorConnect.Models.Favorite", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("ClientId", "ApartmentId");

                    b.HasIndex("ApartmentId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("RealtorConnect.Models.GroupClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupClients");
                });

            modelBuilder.Entity("RealtorConnect.Models.GroupRealtor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("RealtorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RealtorId");

                    b.ToTable("GroupRealtors");
                });

            modelBuilder.Entity("RealtorConnect.Models.Realtor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("GroupRealtorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RealtorGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupRealtorId")
                        .IsUnique()
                        .HasFilter("[GroupRealtorId] IS NOT NULL");

                    b.HasIndex("RealtorGroupId");

                    b.ToTable("Realtors");
                });

            modelBuilder.Entity("RealtorConnect.Models.RealtorGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RealtorGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Default Group"
                        });
                });

            modelBuilder.Entity("RealtorConnect.Models.ViewHistory", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ViewedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientId", "ApartmentId");

                    b.HasIndex("ApartmentId");

                    b.ToTable("ViewHistories");
                });

            modelBuilder.Entity("RealtorConnect.Models.Apartment", b =>
                {
                    b.HasOne("RealtorConnect.Models.ApartmentStatus", "ApartmentStatus")
                        .WithMany()
                        .HasForeignKey("ApartmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtorConnect.Models.Client", "Client")
                        .WithMany("Apartments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RealtorConnect.Models.RealtorGroup", null)
                        .WithMany("Apartments")
                        .HasForeignKey("RealtorGroupId");

                    b.HasOne("RealtorConnect.Models.Realtor", "Realtor")
                        .WithMany("Apartments")
                        .HasForeignKey("RealtorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RealtorConnect.Models.ApartmentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApartmentStatus");

                    b.Navigation("Client");

                    b.Navigation("Realtor");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("RealtorConnect.Models.ChatMessage", b =>
                {
                    b.HasOne("RealtorConnect.Models.Client", "ReceiverClient")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealtorConnect.Models.Realtor", "ReceiverRealtor")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverRealtorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealtorConnect.Models.Client", "SenderClient")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealtorConnect.Models.Realtor", "SenderRealtor")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderRealtorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ReceiverClient");

                    b.Navigation("ReceiverRealtor");

                    b.Navigation("SenderClient");

                    b.Navigation("SenderRealtor");
                });

            modelBuilder.Entity("RealtorConnect.Models.Client", b =>
                {
                    b.HasOne("RealtorConnect.Models.GroupClient", "GroupClient")
                        .WithOne("Client")
                        .HasForeignKey("RealtorConnect.Models.Client", "GroupClientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("GroupClient");
                });

            modelBuilder.Entity("RealtorConnect.Models.Favorite", b =>
                {
                    b.HasOne("RealtorConnect.Models.Apartment", "Apartment")
                        .WithMany("Favorites")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtorConnect.Models.Client", "Client")
                        .WithMany("Favorites")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("RealtorConnect.Models.GroupClient", b =>
                {
                    b.HasOne("RealtorConnect.Models.RealtorGroup", "RealtorGroup")
                        .WithMany("GroupClients")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealtorGroup");
                });

            modelBuilder.Entity("RealtorConnect.Models.GroupRealtor", b =>
                {
                    b.HasOne("RealtorConnect.Models.RealtorGroup", "RealtorGroup")
                        .WithMany("GroupRealtors")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtorConnect.Models.Realtor", null)
                        .WithMany("GroupRealtors")
                        .HasForeignKey("RealtorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealtorGroup");
                });

            modelBuilder.Entity("RealtorConnect.Models.Realtor", b =>
                {
                    b.HasOne("RealtorConnect.Models.GroupRealtor", "GroupRealtor")
                        .WithOne("Realtor")
                        .HasForeignKey("RealtorConnect.Models.Realtor", "GroupRealtorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RealtorConnect.Models.RealtorGroup", "RealtorGroup")
                        .WithMany()
                        .HasForeignKey("RealtorGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupRealtor");

                    b.Navigation("RealtorGroup");
                });

            modelBuilder.Entity("RealtorConnect.Models.ViewHistory", b =>
                {
                    b.HasOne("RealtorConnect.Models.Apartment", "Apartment")
                        .WithMany("ViewHistories")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtorConnect.Models.Client", "Client")
                        .WithMany("ViewHistories")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("RealtorConnect.Models.Apartment", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("ViewHistories");
                });

            modelBuilder.Entity("RealtorConnect.Models.Client", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("Favorites");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("ViewHistories");
                });

            modelBuilder.Entity("RealtorConnect.Models.GroupClient", b =>
                {
                    b.Navigation("Client");
                });

            modelBuilder.Entity("RealtorConnect.Models.GroupRealtor", b =>
                {
                    b.Navigation("Realtor");
                });

            modelBuilder.Entity("RealtorConnect.Models.Realtor", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("GroupRealtors");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });

            modelBuilder.Entity("RealtorConnect.Models.RealtorGroup", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("GroupClients");

                    b.Navigation("GroupRealtors");
                });
#pragma warning restore 612, 618
        }
    }
}
